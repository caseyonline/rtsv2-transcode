%% -*- mode:erlang;tab-width:2;erlang-indent-level:2;indent-tabs-mode:nil -*-
[ {rtsv2,
   [
      {nodeManagerConfig, #{ initialRunState => <<"active">>
                           , initialCanaryState => <<"live">>
                           , forceDrainTimeoutMs => 60000
                           }
      }

    , {loadConfig, #{ loadAnnounceMs => 2000
                    , monitorLoad => true

                      %% Limits are the %age low and high water marks
                    , limits => #{ network => #{ lowWaterMark => 75
                                               , highWaterMark => 90
                                               }
                                 , cpu => #{ lowWaterMark => 75
                                           , highWaterMark => 90
                                           }
                                 }
                      %% Costs have two aspects - fixed and variable.  Fixed is the cost
                      %% of the operation regardless of profiles, variable adjusts according
                      %% to the sum of the profile bitrates.

                      %% Fixed costs are in units of SpecInt for CPU and Kbps for network
                      %% Variable costs are two-tuple of floating point values.  The first is
                      %% multiplied by the number of profiles, the second is multiplied by sum(bitrates).
                      %% The resulting costs are then added, with the results in SpecInt or Kbps

                    , costs => #{ rtmpIngest => #{ fixed => #{ cpu => 1       %% ingest has a fixed CPU cost of 1 specint
                                                             , network => 0   %% ingest has a fixed network cost of 0 bps
                                                             }
                                                 , perProfile => #{ cpu => 0     %% ingest variable CPU cost purely depends on the bitrates
                                                                  , network => 0 %% ingest variable network cost purely depends on the bitrate
                                                                  }
                                                 , perKbps => #{ cpu => 0.001     %% cpu load is 1 specint per Mbps
                                                               , network => 1  %% ingest network cost is worse case 1-to-1 with total profile bitrate
                                                               }
                                                 , hardwareFactors => []
                                                 , limitOverrides => #{ network => #{ lowWaterMark => 85
                                                                                    , highWaterMark => 95
                                                                                    }
                                                                      , cpu => #{ lowWaterMark => 85
                                                                                , highWaterMark => 95
                                                                                }
                                                                      }
                                                 }
                                , webRTCIngest => #{ fixed => #{ cpu => 1       %% ingest has a fixed CPU cost of 1 specint
                                                               , network => 0   %% ingest has a fixed network cost of 0 bps
                                                               }
                                                   , perProfile => #{ cpu => 0
                                                                    , network => 0
                                                                    }   %% ingest variable CPU cost purely depends on the bitrates
                                                   , perKbps => #{cpu => 0
                                                                 , network => 1 } %% ingest variable network cost purely depends on the bitrate
                                                   , hardwareFactors => []
                                                   }
                                , ingestAggregator => #{ fixed => #{ cpu => 1      %% aggregator has a fixed CPU cost of 1 specint
                                                                   , network => 0  %% aggregator has a fixed network cost of 0 bps
                                                                   }
                                                       , perProfile => #{ cpu => 1
                                                                        , network => 1 }   %% aggregator variable CPU cost varies on number of stream (audio transcode per stream) and the bitrates (packetisation etc)
                                                       , perKbps => #{ cpu => 0
                                                                     , network => 1}   %% aggregator variable network cost purely depends on the bitrate
                                                       , hardwareFactors => []
                                                       }
                                , streamRelay => #{ fixed => #{ cpu => 1
                                                              , network => 0
                                                              }
                                                  , perProfile => #{ cpu => 1
                                                                   , network => 1 }
                                                  , perKbps => #{ cpu => 0
                                                                , network => 1}
                                                  , hardwareFactors => []
                                                  }
                                , egestInstance => #{ fixed => #{ cpu => 1
                                                                , network => 0
                                                                }
                                                    , perProfile => #{ cpu => 0
                                                                     , network => 0 }
                                                    , perKbps => #{ cpu => 0
                                                                  , network => 0}
                                                    , hardwareFactors => []
                                                    }
                                , egestClient => #{ fixed => #{ cpu => 0
                                                              , network => 0
                                                              }
                                                  , perProfile => #{ cpu => 0
                                                                   , network => 0 }
                                                  , perKbps => #{ cpu => 0.00003
                                                                , network => 1}
                                                  , hardwareFactors => []
                                                  }
                                }
                    }}

   , {featureFlags, #{ mediaGateway => <<"on">>
                     }}

   , {globalConfig, #{ intraPoPLatencyMs => 1000
                     }}
   %% TODO: make 3001 be a env variable
   , {llnwApiConfig, #{ streamAuthTypeUrl => <<"http://%HOSTNAME%:3001/system/llnwstub/rts/v1/streamauthtype">>
                      , streamAuthUrl => <<"http://%HOSTNAME%:3001/system/llnwstub/rts/v1/streamauth">>
                      , streamPublishUrl => <<"http://%HOSTNAME%:3001/system/llnwstub/rts/v1/streampublish">>
                      , slotLookupUrl => <<"http://%HOSTNAME%:3001/system/llnwstub/rts/v1/slotid/{account}/{streamName}">>
                      , defaultSegmentDurationMs => 2000
                      , defaultPlaylistDurationMs => 30000
                      , validationUrlWhitelist => [<<"subscribe-validator.rts.llnwi.net">>]
                      }}

   , {intraPoPConfig, #{ bindPort => 7946
                       , rpcPort => 7373
                       , rejoinEveryMs => 30000
                       , replayMessagesOnJoin => true
                       , vmLivenessIntervalMs => 200
                       , reannounceAgentEveryMs => #{ aggregator => 10000
                                                    , relay => 10000
                                                    , egest => 10000
                                                    }
                       , missCountBeforeExpiry => 6
                       }}


   , {transPoPConfig, #{ bindPort => 8946
                       , rpcPort => 8373
                       , leaderTimeoutMs => 2000
                       , leaderAnnounceMs => 1000
                       , rejoinEveryMs => 30000
                       , rttRefreshMs => 30000
                       , defaultRttMs => 2
                       , connectStreamAfterMs => 300
                       , replayMessagesOnJoin => true
                       }}

   , {rtmpIngestConfig, #{ port => 1935
                         , canaryPort => 1936
                         , nbAcceptors => 10
                         , cryptoContextExpiryMs => 1000
                         }}

   , {ingestInstanceConfig, #{ eqLogIntervalMs => 30000
                             , aggregatorRetryTimeMs => 500
                             , qosPollIntervalMs => 1000
                             , abortIfNoMediaMs => 5000
                             }}

   , {ingestStatsConfig, #{ pollPeriodMs => 1000
                          }}

   , {egestStatsConfig, #{ pollPeriodMs => 10000
                         }}

   , {ingestAggregatorConfig, #{ shutdownLingerTimeMs => 20000
                               , forceDrainTimeoutMs => 1000
                               }}

   , {streamRelayConfig, #{ lingerTimeMs => 30000
                          , reApplyPlanTimeMs => 1000
                          , forceDrainTimeoutMs => 1000
                          , aggregatorExitLingerTimeMs => 2000
                          }}

   , {egestConfig, #{ eqLogIntervalMs => 30000
                    , lingerTimeMs => 30000
                    , relayCreationRetryMs => 1000
                    , reserveForPotentialNumClients => 100
                    , decayReserveMs => 60000
                    , forceDrainTimeoutMs => 30000
                    , numForceDrainPhases => 10
                    , aggregatorExitLingerTimeMs => 2000
                    }}

   , {popDefinitionConfig, #{ directory => "scripts/env/common.data/"
                            , popDefinitionFile => "popDefinition.json"
                            , wanDefinitionFile => "wanDefinition.json"
                            }}

   , {httpApiConfig, #{ publicPort => 3000
                      , systemPort => 3001
                      , supportPort => 3002
                      }}

   , {healthConfig, #{thresholds => #{ perfect => 100
                                     , excellent => 75
                                     , good => 50
                                     , poor => 25
                                     }}}
   ]
  }
].
